#!groovy


try {
  properties([parameters([
    string(name: 'BRANCH_NAME',                                  defaultValue: 'master',                                       description: 'Branch to build'),
    string(name: 'builddir',                                     defaultValue: 'is_apaas_openshift_cookbook-test-' + env.BUILD_NUMBER, description: 'Build directory'),
    string(name: 'OSE_VERSIONS',                                 defaultValue: '1.3',                                          description: 'OSE versions to build, separated by spaces'),
    string(name: 'CHEF_IPTABLES_COOKBOOK_VERSION',               defaultValue: 'latest',                                       description: 'IPtables cookbook version, eg 1.0.0'),
    string(name: 'CHEF_SELINUX_COOKBOOK_VERSION',                defaultValue: 'latest',                                       description: 'SELinux cookbook version, eg 0.7.2'),
    string(name: 'CHEF_YUM_COOKBOOK_VERSION',                    defaultValue: 'latest',                                       description: 'yum cookbook version, eg 3.6.1'),
    string(name: 'CHEF_COMPAT_RESOURCE_COOKBOOK_VERSION',        defaultValue: 'latest',                                       description: 'compat_resource cookbook version'),
    string(name: 'CHEF_INJECT_COMPAT_RESOURCE_COOKBOOK_VERSION', defaultValue: 'false',                                        description: 'Whether to inject compat_resource cookbook version (eg true for some envs)'),
    string(name: 'CHEF_DEPLOY_METHODS',                          defaultValue: 'server',                                       description: 'Which deployment methods to use (server and/or solo)'),
    string(name: 'CHEF_DEPLOY_CONTAINERIZED',                    defaultValue: '',                                             description: 'If "true", deploy containerized, "true false" for both'),
    string(name: 'LOG_LEVEL',                                    defaultValue: 'debug',                                        description: 'shutit log level (debug, info, warning, critical)'),
    string(name: 'SHUTIT_CLUSTER_CONFIGS',                       defaultValue: 'test_multi_node_separate_etcd',                description: 'which cluster configs to test'),
    booleanParam(name: 'doshutit',                               defaultValue: true,                                           description: 'Whether to run shutit tests'),
  ])])
  if (params.doshutit) {
    stage('shutit_tests') {
      node() {
        dir(builddir) {
          // Clone, or update if this is a re-run
          sh 'git clone --recursive --depth 1 https://github.com/ianmiell/shutit-openshift-cluster || (cd shutit-openshift-cluster && git pull)'
          dir('shutit-openshift-cluster') {
            withEnv(["SHUTIT=/usr/local/bin/shutit"]) {
              sh './run_tests.sh -s tk.shutit.shutit_openshift_cluster.shutit_openshift_cluster do_upgrade_13_14 true -s tk.shutit.shutit_openshift_cluster.shutit_openshift_cluster do_upgrade_14_15 true -s tk.shutit.shutit_openshift_cluster.shutit_openshift_cluster do_upgrade_15_36 true -s tk.shutit.shutit_openshift_cluster.shutit_openshift_cluster do_upgrade_36_37 true --interactive 0'
            }
          }
        }
      }
    }
  }
  mail bcc: '', body: '''See: https://jenkins.meirionconsulting.com/job/is_apaas_openshift_cookbook-upgrades-pipeline

''', cc: '', from: 'is_apaas_openshift_cookbook@jenkins.meirionconsulting.com', replyTo: '', subject: 'Upgrades Build OK', to: 'ian.miell@gmail.com, william17.burton@gmail.com, julien.perville@perfect-memory.com'
  stage('cleanup') {
    node() {
      dir(builddir) {
        dir('shutit-openshift-cluster') {
          sh('yes | ./destroy_vms.sh || true')
        }
      }
    }
  }
} catch(err) {
  mail bcc: '', body: '''See: https://jenkins.meirionconsulting.com/job/is_apaas_openshift_cookbook-pipeline

''' + err, cc: '', from: 'is_apaas_openshift_cookbook@jenkins.meirionconsulting.com', replyTo: '', subject: 'Upgrades Build Failure', to: 'ian.miell@gmail.com'
  throw(err)
  if (params.doshutit) {
    stage('cleanup') {
      node() {
        dir(builddir) {
          dir('shutit-openshift-cluster') {
            sh('yes | ./destroy_vms.sh || true')
          }
        }
      }
    }
  }
}
